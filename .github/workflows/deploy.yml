name: deploy

on:
  push:
    tags:
      - 'prod-v*'
      - 'test-v*'

permissions:
  contents: read
  id-token: write

env:
  ALLOWED_USERS: florpor eliyaba Leonardo-coder

jobs:
  test:
    uses: ./.github/workflows/test.yml

  deploy:
    needs: [test]

    runs-on: ubuntu-22.04

    steps:
      - name: check actor allowed
        run: |
          [[ $ALLOWED_USERS =~ (^|[[:space:]])${{ github.triggering_actor }}($|[[:space:]]) ]]

      - name: checkout repo
        uses: actions/checkout@v4

      - name: set environment
        run: |
          export ENV_NAME=$(echo ${{ github.ref_name }} | cut -f 1 -d '-')
          echo "ENV_NAME=$ENV_NAME" >> $GITHUB_ENV
          export VERSION_NAME=$(echo ${{ github.ref_name }} | sed -e "s/^$ENV_NAME-v//")
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
          export IAM_ROLE=$(echo '${{ secrets.ENV_CONFIG_MAP }}' | jq -r .$ENV_NAME.role)
          export AWS_REGION=$(echo '${{ secrets.ENV_CONFIG_MAP }}' | jq -r .$ENV_NAME.region)
          export ECR_REPO=$(echo '${{ secrets.ENV_CONFIG_MAP }}' | jq -r .$ENV_NAME.repo)
          echo "::add-mask::$IAM_ROLE"
          echo "::add-mask::$AWS_REGION"
          echo "::add-mask::$ECR_REPO"
          echo "IAM_ROLE=$IAM_ROLE" >> $GITHUB_ENV
          echo "AWS_REGION=$AWS_REGION" >> $GITHUB_ENV
          echo "ECR_REPO=$ECR_REPO" >> $GITHUB_ENV

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.IAM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: setup qemu
        uses: docker/setup-qemu-action@v3

      - name: setup docker build
        uses: docker/setup-buildx-action@v3

      - name: calc image tag
        run: |
          export ECR_TAG=$(echo "$ECR_REPO:$VERSION_NAME")
          echo "::add-mask::$ECR_TAG"
          echo "ECR_TAG=$ECR_TAG" >> $GITHUB_ENV

      - name: login with ecr
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ECR_REPO }}

      # this action fails to push for some reason, so load and push via
      # docker cli
      - name: build docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64
          file: ./Dockerfile
          build-args: |
            TARGET_ARCH=arm64
          load: true
          tags: ${{ env.ECR_TAG }}

      - name: push docker image
        run: docker push $ECR_TAG
